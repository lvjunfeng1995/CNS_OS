


ARM Macro Assembler    Page 1 


    1 00000000         
    2 00000000         
    3 00000000         
    4 00000000         
    5 00000000         
    6 00000000         ;*******************************************************
                       **************************************************
    7 00000000         ;                                          PUBLIC FUNCTI
                       ONS
    8 00000000         ;*******************************************************
                       *************************************************
    9 00000000         
   10 00000000         
   11 00000000                 IMPORT           ND_TCBHighRdyPtr
   12 00000000                 IMPORT           ND_TCBCurPtr
   13 00000000                 IMPORT           OS_CPU_ExceptStkBase
   14 00000000         
   15 00000000                 EXPORT           ND_OSCtxSw
   16 00000000                 EXPORT           ND_OSIntCtxSw
   17 00000000                 EXPORT           ND_OSStartHighRdy
   18 00000000                 EXPORT           PendSV_Handler
   19 00000000         
   20 00000000         ;*******************************************************
                       *************************************************
   21 00000000         ;                           CONSTANTS USED TO ACCESS TAS
                       K CONTEXT STACK
   22 00000000         ;*******************************************************
                       *************************************************
   23 00000000         
   24 00000000         
   25 00000000 E000ED04 
                       NVIC_INT_CTRL
                               EQU              0xE000ED04  ; Interrupt control
                                                             state register.
   26 00000000 E000ED22 
                       NVIC_SYSPRI14
                               EQU              0xE000ED22  ; System priority r
                                                            egister (priority 1
                                                            4).
   27 00000000 000000FF 
                       NVIC_PENDSV_PRI
                               EQU              0xFF        ; PendSV priority v
                                                            alue (lowest).
   28 00000000 10000000 
                       NVIC_PENDSVSET
                               EQU              0x10000000  ; Value to trigger 
                                                            PendSV exception.
   29 00000000         
   30 00000000         
   31 00000000         ;*******************************************************
                       ************************************************
   32 00000000         ;                                    CODE GENERATION DIR
                       ECTIVES
   33 00000000         ;*******************************************************
                       ************************************************
   34 00000000         
   35 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   36 00000000                 THUMB



ARM Macro Assembler    Page 2 


   37 00000000                 REQUIRE8
   38 00000000                 PRESERVE8
   39 00000000         
   40 00000000         
   41 00000000         ;*******************************************************
                       *************************************************
   42 00000000         
   43 00000000         
   44 00000000         ND_OSStartHighRdy
   45 00000000 481B            LDR              R0, =NVIC_SYSPRI14 ; Set the Pe
                                                            ndSV exception prio
                                                            rity
   46 00000002 F04F 01FF       LDR              R1, =NVIC_PENDSV_PRI
   47 00000006 7001            STRB             R1, [R0]
   48 00000008         
   49 00000008 2000            MOVS             R0, #0      ; Set the PSP to 0 
                                                            for initial context
                                                             switch call
   50 0000000A F380 8809       MSR              PSP, R0
   51 0000000E         
   52 0000000E 4819            LDR              R0, =OS_CPU_ExceptStkBase ; Ini
                                                            tialize the MSP to 
                                                            the OS_CPU_ExceptSt
                                                            kBase
   53 00000010 6801            LDR              R1, [R0]
   54 00000012 F381 8808       MSR              MSP, R1
   55 00000016         
   56 00000016 4818            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
   57 00000018 F04F 5180       LDR              R1, =NVIC_PENDSVSET
   58 0000001C 6001            STR              R1, [R0]
   59 0000001E         
   60 0000001E B662            CPSIE            I           ; Enable interrupts
                                                             at processor level
                                                            
   61 00000020         
   62 00000020         OSStartHang
   63 00000020 E7FE            B                OSStartHang ; Should never get 
                                                            here
   64 00000022         
   65 00000022         ND_OSCtxSw
   66 00000022 4815            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
   67 00000024 F04F 5180       LDR              R1, =NVIC_PENDSVSET
   68 00000028 6001            STR              R1, [R0]
   69 0000002A         
   70 0000002A 4770            BX               LR
   71 0000002C         
   72 0000002C         
   73 0000002C         ND_OSIntCtxSw
   74 0000002C 4812            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
   75 0000002E F04F 5180       LDR              R1, =NVIC_PENDSVSET



ARM Macro Assembler    Page 3 


   76 00000032 6001            STR              R1, [R0]
   77 00000034         
   78 00000034 4770            BX               LR
   79 00000036         
   80 00000036         PendSV_Handler
   81 00000036 B672            CPSID            I           ; Prevent interrupt
                                                            ion during context 
                                                            switch
   82 00000038 F3EF 8009       MRS              R0, PSP     ; PSP is process st
                                                            ack pointer
   83 0000003C B128            CBZ              R0, OS_CPU_PendSVHandler_nosave
 
                                                            ; Skip register sav
                                                            e the first time
   84 0000003E         
   85 0000003E 3820            SUBS             R0, R0, #0x20 ; Save remaining 
                                                            regs r4-11 on proce
                                                            ss stack
   86 00000040 E880 0FF0       STM              R0, {R4-R11}
   87 00000044         
   88 00000044 490D            LDR              R1, =ND_TCBCurPtr ; ND_OSTCBCur
                                                            Ptr->OSTCBStkPtr = 
                                                            SP;
   89 00000046 6809            LDR              R1, [R1]
   90 00000048 6008            STR              R0, [R1]    ; R0 is SP of proce
                                                            ss being switched o
                                                            ut
   91 0000004A         
   92 0000004A         ; At this point, entire context of process has been save
                       d
   93 0000004A         OS_CPU_PendSVHandler_nosave
   94 0000004A 480C            LDR              R0, =ND_TCBCurPtr ; OSTCBCurPtr
                                                             = OSTCBHighRdyPtr;
                                                            
   95 0000004C 490C            LDR              R1, =ND_TCBHighRdyPtr
   96 0000004E 680A            LDR              R2, [R1]
   97 00000050 6002            STR              R2, [R0]
   98 00000052 F04F 0000       MOV              R0, #0
   99 00000056 6008            STR              R0, [R1]
  100 00000058 F04F 0100       MOV              R1, #0
  101 0000005C         
  102 0000005C 6810            LDR              R0, [R2]    ; R0 is new process
                                                             SP; SP = OSTCBHigh
                                                            RdyPtr->StkPtr;
  103 0000005E E890 0FF0       LDM              R0, {R4-R11} ; Restore r4-11 fr
                                                            om new process stac
                                                            k
  104 00000062 3020            ADDS             R0, R0, #0x20
  105 00000064 F380 8809       MSR              PSP, R0     ; Load PSP with new
                                                             process SP
  106 00000068 F04E 0E04       ORR              LR, LR, #0x04 ; Ensure exceptio
                                                            n  return uses proc
                                                            ess stack
  107 0000006C B662            CPSIE            I
  108 0000006E 4770            BX               LR          ; Exception return 
                                                            will restore remain
                                                            ing context
  109 00000070         
  110 00000070                 ALIGN



ARM Macro Assembler    Page 4 


  111 00000070         
  112 00000070                 END
              E000ED22 
              00000000 
              E000ED04 
              00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\obj\nd_os_cpu.d -o.\obj\nd_os_cpu.o -I.\RTE\_CNS_OS -Id:\Keil_v5
\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -Id:\Keil_v5\ARM\CMSIS\Includ
e --predefine="__UVISION_VERSION SETA 523" --predefine="STM32F10X_HD SETA 1" --
list=.\listings\nd_os_cpu.lst ND_OS\nd_os_cpu.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 35 in file ND_OS\nd_os_cpu.s
   Uses
      None
Comment: .text unused
ND_OSCtxSw 00000022

Symbol: ND_OSCtxSw
   Definitions
      At line 65 in file ND_OS\nd_os_cpu.s
   Uses
      At line 15 in file ND_OS\nd_os_cpu.s
Comment: ND_OSCtxSw used once
ND_OSIntCtxSw 0000002C

Symbol: ND_OSIntCtxSw
   Definitions
      At line 73 in file ND_OS\nd_os_cpu.s
   Uses
      At line 16 in file ND_OS\nd_os_cpu.s
Comment: ND_OSIntCtxSw used once
ND_OSStartHighRdy 00000000

Symbol: ND_OSStartHighRdy
   Definitions
      At line 44 in file ND_OS\nd_os_cpu.s
   Uses
      At line 17 in file ND_OS\nd_os_cpu.s
Comment: ND_OSStartHighRdy used once
OSStartHang 00000020

Symbol: OSStartHang
   Definitions
      At line 62 in file ND_OS\nd_os_cpu.s
   Uses
      At line 63 in file ND_OS\nd_os_cpu.s
Comment: OSStartHang used once
OS_CPU_PendSVHandler_nosave 0000004A

Symbol: OS_CPU_PendSVHandler_nosave
   Definitions
      At line 93 in file ND_OS\nd_os_cpu.s
   Uses
      At line 83 in file ND_OS\nd_os_cpu.s
Comment: OS_CPU_PendSVHandler_nosave used once
PendSV_Handler 00000036

Symbol: PendSV_Handler
   Definitions
      At line 80 in file ND_OS\nd_os_cpu.s
   Uses
      At line 18 in file ND_OS\nd_os_cpu.s
Comment: PendSV_Handler used once
7 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NVIC_INT_CTRL E000ED04

Symbol: NVIC_INT_CTRL
   Definitions
      At line 25 in file ND_OS\nd_os_cpu.s
   Uses
      At line 56 in file ND_OS\nd_os_cpu.s
      At line 66 in file ND_OS\nd_os_cpu.s
      At line 74 in file ND_OS\nd_os_cpu.s

NVIC_PENDSVSET 10000000

Symbol: NVIC_PENDSVSET
   Definitions
      At line 28 in file ND_OS\nd_os_cpu.s
   Uses
      At line 57 in file ND_OS\nd_os_cpu.s
      At line 67 in file ND_OS\nd_os_cpu.s
      At line 75 in file ND_OS\nd_os_cpu.s

NVIC_PENDSV_PRI 000000FF

Symbol: NVIC_PENDSV_PRI
   Definitions
      At line 27 in file ND_OS\nd_os_cpu.s
   Uses
      At line 46 in file ND_OS\nd_os_cpu.s
Comment: NVIC_PENDSV_PRI used once
NVIC_SYSPRI14 E000ED22

Symbol: NVIC_SYSPRI14
   Definitions
      At line 26 in file ND_OS\nd_os_cpu.s
   Uses
      At line 45 in file ND_OS\nd_os_cpu.s
Comment: NVIC_SYSPRI14 used once
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

ND_TCBCurPtr 00000000

Symbol: ND_TCBCurPtr
   Definitions
      At line 12 in file ND_OS\nd_os_cpu.s
   Uses
      At line 88 in file ND_OS\nd_os_cpu.s
      At line 94 in file ND_OS\nd_os_cpu.s

ND_TCBHighRdyPtr 00000000

Symbol: ND_TCBHighRdyPtr
   Definitions
      At line 11 in file ND_OS\nd_os_cpu.s
   Uses
      At line 95 in file ND_OS\nd_os_cpu.s
Comment: ND_TCBHighRdyPtr used once
OS_CPU_ExceptStkBase 00000000

Symbol: OS_CPU_ExceptStkBase
   Definitions
      At line 13 in file ND_OS\nd_os_cpu.s
   Uses
      At line 52 in file ND_OS\nd_os_cpu.s
Comment: OS_CPU_ExceptStkBase used once
3 symbols
348 symbols in table
